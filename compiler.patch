diff --git a/src/absil/il.fs b/src/absil/il.fs
index 764f688..d8c43c9 100755
--- a/src/absil/il.fs
+++ b/src/absil/il.fs
@@ -10,7 +10,7 @@
 // You must not remove this notice, or any other, from this software.
 //----------------------------------------------------------------------------
 
-module internal Microsoft.FSharp.Compiler.AbstractIL.IL
+module (*internal*) Microsoft.FSharp.Compiler.AbstractIL.IL
 
 #nowarn "49"
 #nowarn "343" // The type 'ILAssemblyRef' implements 'System.IComparable' explicitly but provides no corresponding override for 'Object.Equals'.
diff --git a/src/absil/il.fsi b/src/absil/il.fsi
index 0aac394..eb8144c 100755
--- a/src/absil/il.fsi
+++ b/src/absil/il.fsi
@@ -11,7 +11,7 @@
 
 /// The "unlinked" view of .NET metadata and code.  Central to 
 ///  to Abstract IL library
-module internal Microsoft.FSharp.Compiler.AbstractIL.IL 
+module (*internal*) Microsoft.FSharp.Compiler.AbstractIL.IL 
 
 open Internal.Utilities
 open System.Collections.Generic
diff --git a/src/fsharp/ast.fs b/src/fsharp/ast.fs
index c7a8a75..5bc9752 100644
--- a/src/fsharp/ast.fs
+++ b/src/fsharp/ast.fs
@@ -10,7 +10,7 @@
 // You must not remove this notice, or any other, from this software.
 //----------------------------------------------------------------------------
 
-module internal Microsoft.FSharp.Compiler.Ast
+module (*internal*) Microsoft.FSharp.Compiler.Ast
 
 open System.Collections.Generic
 open Internal.Utilities
@@ -2071,29 +2071,29 @@ type LexBuffer<'Char> with
     member lexbuf.LexemeRange  = mkSynRange lexbuf.StartPos lexbuf.EndPos
 
 /// Get the range corresponding to the result of a grammar rule while it is being reduced
-let lhs (parseState: IParseState) = 
+let internal lhs (parseState: IParseState) = 
     let p1 = parseState.ResultStartPosition
     let p2 = parseState.ResultEndPosition
     mkSynRange p1 p2
 
 /// Get the range covering two of the r.h.s. symbols of a grammar rule while it is being reduced
-let rhs2 (parseState: IParseState) i j = 
+let internal rhs2 (parseState: IParseState) i j = 
     let p1 = parseState.InputStartPosition i
     let p2 = parseState.InputEndPosition j
     mkSynRange p1 p2
 
 /// Get the range corresponding to one of the r.h.s. symbols of a grammar rule while it is being reduced
-let rhs parseState i = rhs2 parseState i i 
+let internal rhs parseState i = rhs2 parseState i i 
 
 type IParseState with 
-    member x.GetSynArgNameGenerator() = 
+    member internal x.GetSynArgNameGenerator() = 
         let key = "SynArgNameGenerator"
         let bls = x.LexBuffer.BufferLocalStore
         if not (bls.ContainsKey key) then  
             bls.[key] <- box (SynArgNameGenerator())
         bls.[key] :?> SynArgNameGenerator
 
-    member x.ResetSynArgNameGenerator() = x.GetSynArgNameGenerator().Reset()
+    member internal x.ResetSynArgNameGenerator() = x.GetSynArgNameGenerator().Reset()
 
 
 /// XmlDoc F# lexer/parser state, held in the BufferLocalStore for the lexer.
@@ -2259,4 +2259,4 @@ let rec synExprContainsError inpExpr =
 
           | SynExpr.LetOrUseBang  (_,_,_,_,e1,e2,_) -> 
               walkExpr e1 || walkExpr e2 
-    walkExpr inpExpr
\ No newline at end of file
+    walkExpr inpExpr
diff --git a/src/fsharp/vs/ServiceUntypedParse.fs b/src/fsharp/vs/ServiceUntypedParse.fs
index fe1fa6d..eb3af6e 100755
--- a/src/fsharp/vs/ServiceUntypedParse.fs
+++ b/src/fsharp/vs/ServiceUntypedParse.fs
@@ -99,7 +99,7 @@ type internal UntypedParseResults =
 [<Sealed>]
 type (* internal *) UntypedParseInfo internal (parsed:UntypedParseResults) = 
 
-    member internal scope.ParseTree =
+    member (*internal*) scope.ParseTree =
         match parsed with
         | { Input=x } -> x
 
@@ -784,4 +784,4 @@ module internal UntypedParseInfoImpl =
                             | Some (completionPath) -> getCompletionContextForInheritSynMember (componentInfo, typeDefnKind, completionPath)
                             | None -> Some (CompletionContext.Invalid) // A $ .B -> no completion list
                         | _ -> None }
-        AstTraversal.Traverse(line, col, pt, walker)
\ No newline at end of file
+        AstTraversal.Traverse(line, col, pt, walker)
diff --git a/src/fsharp/vs/ServiceUntypedParse.fsi b/src/fsharp/vs/ServiceUntypedParse.fsi
index d79630c..aea2724 100755
--- a/src/fsharp/vs/ServiceUntypedParse.fsi
+++ b/src/fsharp/vs/ServiceUntypedParse.fsi
@@ -36,7 +36,7 @@ type internal UntypedParseResults =
 
 [<Sealed>]
 type (* internal *) UntypedParseInfo = 
-    member internal ParseTree : Ast.ParsedInput option
+    member (*internal*) ParseTree : Ast.ParsedInput option
     /// Notable parse info for ParameterInfo at a given location
     member internal FindNoteworthyParamInfoLocations : line:int * col:int -> NoteworthyParamInfoLocations option
     /// Name of the file for which this information were created
